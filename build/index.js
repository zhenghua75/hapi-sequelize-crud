'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.register = undefined;

var _crud = require('./crud');

var _crud2 = _interopRequireDefault(_crud);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _qs = require('qs');

var _qs2 = _interopRequireDefault(_qs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (!global._babelPolyfill) {
  require('babel-polyfill');
}

function _ref(request, reply) {
  const uri = request.raw.req.url;
  const parsed = _url2.default.parse(uri, false);
  parsed.query = _qs2.default.parse(parsed.query);
  request.setUrl(parsed);

  return reply.continue();
}

const register = (server, options = {}, next) => {
  server.dependency('hapi-sequelize');

  options.prefix = options.prefix || '/';
  options.name = options.name || 'db';

  const db = server.plugins['hapi-sequelize'][options.name];
  const models = db.sequelize.models;

  const onRequest = _ref;

  server.ext({
    type: 'onRequest',
    method: onRequest
  });

  for (const modelName of Object.keys(models)) {
    const model = models[modelName];
    const { plural, singular } = model.options.name;
    model._plural = plural.toLowerCase();
    model._singular = singular.toLowerCase();
    model._Plural = plural;
    model._Singular = singular;

    // Join tables
    if (model.options.name.singular !== model.name) continue;

    for (const key of Object.keys(model.associations)) {
      const association = model.associations[key];
      const { source, target } = association;

      const sourceName = source.options.name;

      const names = rev => {
        const arr = [{
          plural: sourceName.plural.toLowerCase(),
          singular: sourceName.singular.toLowerCase(),
          original: sourceName
        }, {
          plural: association.options.name.plural.toLowerCase(),
          singular: association.options.name.singular.toLowerCase(),
          original: association.options.name
        }];

        return rev ? { b: arr[0], a: arr[1] } : { a: arr[0], b: arr[1] };
      };

      const targetAssociations = target.associations[sourceName.plural] || target.associations[sourceName.singular];
      const sourceType = association.associationType,
            targetType = (targetAssociations || {}).associationType;

      try {
        if (sourceType === 'BelongsTo' && (targetType === 'BelongsTo' || !targetType)) {
          _crud.associations.oneToOne(server, source, target, names(), options);
          _crud.associations.oneToOne(server, target, source, names(1), options);
        }

        if (sourceType === 'BelongsTo' && targetType === 'HasMany') {
          _crud.associations.oneToOne(server, source, target, names(), options);
          _crud.associations.oneToOne(server, target, source, names(1), options);
          _crud.associations.oneToMany(server, target, source, names(1), options);
        }

        if (sourceType === 'BelongsToMany' && targetType === 'BelongsToMany') {
          _crud.associations.oneToOne(server, source, target, names(), options);
          _crud.associations.oneToOne(server, target, source, names(1), options);

          _crud.associations.oneToMany(server, source, target, names(), options);
          _crud.associations.oneToMany(server, target, source, names(1), options);
        }

        _crud.associations.associate(server, source, target, names(), options);
        _crud.associations.associate(server, target, source, names(1), options);
      } catch (e) {
        // There might be conflicts in case of models associated with themselves and some other
        // rare cases.
      }
    }
  }

  // build the methods for each model now that we've defined all the
  // associations
  Object.keys(models).forEach(modelName => {
    const model = models[modelName];
    (0, _crud2.default)(server, model, options);
  });

  return next();
};

register.attributes = {
  pkg: require('../package.json')
};

exports.register = register;
//# sourceMappingURL=data:application/json;base64,