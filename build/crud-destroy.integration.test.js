'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

require('sinon-bluebird');

var _integrationSetup = require('../test/integration-setup.js');

var _integrationSetup2 = _interopRequireDefault(_integrationSetup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const STATUS_OK = 200;
const STATUS_NOT_FOUND = 404;
const STATUS_BAD_REQUEST = 400;

(0, _integrationSetup2.default)(_ava2.default);

function* _ref2(t) {
  const { server, instances, sequelize: { models: { Player } } } = t.context;
  const { player1, player2 } = instances;
  const url = `/player?name=${ player1.name }`;
  const method = 'DELETE';

  const presentPlayer = yield Player.findById(player1.id);
  t.truthy(presentPlayer);

  const { result, statusCode } = yield server.inject({ url, method });
  t.is(statusCode, STATUS_OK);
  t.is(result.id, player1.id);

  const deletedPlayer = yield Player.findById(player1.id);
  t.falsy(deletedPlayer);
  const stillTherePlayer = yield Player.findById(player2.id);
  t.truthy(stillTherePlayer);
}

(0, _ava2.default)('destroy where /player?name=Baseball', (() => {
  var _ref = _asyncToGenerator(_ref2);

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})());

function* _ref4(t) {
  const { server, instances, sequelize: { models: { Player } } } = t.context;
  const { player1, player2 } = instances;
  const url = `/players?name=${ player1.name }`;
  const method = 'DELETE';

  const presentPlayer = yield Player.findById(player1.id);
  t.truthy(presentPlayer);

  const { result, statusCode } = yield server.inject({ url, method });
  t.is(statusCode, STATUS_OK);
  t.is(result.id, player1.id);

  const deletedPlayer = yield Player.findById(player1.id);
  t.falsy(deletedPlayer);
  const stillTherePlayer = yield Player.findById(player2.id);
  t.truthy(stillTherePlayer);
}

(0, _ava2.default)('destroyAll where /players?name=Baseball', (() => {
  var _ref3 = _asyncToGenerator(_ref4);

  return function (_x2) {
    return _ref3.apply(this, arguments);
  };
})());

function _ref6({ id }) {
  return id;
}

function _ref7({ id }) {
  return id;
}

function* _ref8(t) {
  const { server, instances, sequelize: { models: { Player } } } = t.context;
  const { player1, player2 } = instances;
  const url = '/players';
  const method = 'DELETE';

  const presentPlayers = yield Player.findAll();
  const playerIds = presentPlayers.map(_ref6);
  t.truthy(playerIds.includes(player1.id));
  t.truthy(playerIds.includes(player2.id));

  const { result, statusCode } = yield server.inject({ url, method });
  t.is(statusCode, STATUS_OK);
  const resultPlayerIds = result.map(_ref7);
  t.truthy(resultPlayerIds.includes(player1.id));
  t.truthy(resultPlayerIds.includes(player2.id));

  const deletedPlayers = yield Player.findAll();
  t.is(deletedPlayers.length, 0);
}

(0, _ava2.default)('destroyAll /players', (() => {
  var _ref5 = _asyncToGenerator(_ref8);

  return function (_x3) {
    return _ref5.apply(this, arguments);
  };
})());

function _ref10({ id }) {
  return id;
}

function* _ref11(t) {
  const { server, instances, sequelize: { models: { Player } } } = t.context;
  const { player1, player2 } = instances;
  // this doesn't exist in our fixtures
  const url = '/player/10';
  const method = 'DELETE';

  const presentPlayers = yield Player.findAll();
  const playerIds = presentPlayers.map(_ref10);
  t.truthy(playerIds.includes(player1.id));
  t.truthy(playerIds.includes(player2.id));

  const { statusCode } = yield server.inject({ url, method });
  t.is(statusCode, STATUS_NOT_FOUND);

  const nonDeletedPlayers = yield Player.findAll();
  t.is(nonDeletedPlayers.length, presentPlayers.length);
}

(0, _ava2.default)('destroy not found /player/10', (() => {
  var _ref9 = _asyncToGenerator(_ref11);

  return function (_x4) {
    return _ref9.apply(this, arguments);
  };
})());

function _ref13({ id }) {
  return id;
}

function* _ref14(t) {
  const { server, instances, sequelize: { models: { Player } } } = t.context;
  const { player1, player2 } = instances;
  // this doesn't exist in our fixtures
  const url = '/players?name=no';
  const method = 'DELETE';

  const presentPlayers = yield Player.findAll();
  const playerIds = presentPlayers.map(_ref13);
  t.truthy(playerIds.includes(player1.id));
  t.truthy(playerIds.includes(player2.id));

  const { statusCode } = yield server.inject({ url, method });
  t.is(statusCode, STATUS_NOT_FOUND);

  const nonDeletedPlayers = yield Player.findAll();
  t.is(nonDeletedPlayers.length, presentPlayers.length);
}

(0, _ava2.default)('destroyAll not found /players?name=no', (() => {
  var _ref12 = _asyncToGenerator(_ref14);

  return function (_x5) {
    return _ref12.apply(this, arguments);
  };
})());

function* _ref16(t) {
  const { server } = t.context;
  const url = '/notamodel';
  const method = 'DELETE';

  const { statusCode } = yield server.inject({ url, method });
  t.is(statusCode, STATUS_NOT_FOUND);
}

(0, _ava2.default)('not found /notamodel', (() => {
  var _ref15 = _asyncToGenerator(_ref16);

  return function (_x6) {
    return _ref15.apply(this, arguments);
  };
})());

function _ref18({ id }) {
  return id;
}

function* _ref19(t) {
  const { server, instances, sequelize: { models: { Player } } } = t.context;
  const { player1, player2 } = instances;
  // this doesn't exist in our fixtures
  const url = '/players/returnsOne';
  const method = 'DELETE';

  const presentPlayers = yield Player.findAll();
  const playerIds = presentPlayers.map(_ref18);
  t.truthy(playerIds.includes(player1.id));
  t.truthy(playerIds.includes(player2.id));

  const { result, statusCode } = yield server.inject({ url, method });
  t.is(statusCode, STATUS_OK);
  t.is(result.id, player1.id);

  const nonDeletedPlayers = yield Player.findAll();
  t.is(nonDeletedPlayers.length, presentPlayers.length - 1);
}

(0, _ava2.default)('destroyScope /players/returnsOne', (() => {
  var _ref17 = _asyncToGenerator(_ref19);

  return function (_x7) {
    return _ref17.apply(this, arguments);
  };
})());

function _ref21({ id }) {
  return id;
}

function _ref22({ id }) {
  return id;
}

function* _ref23(t) {
  const { server, instances, sequelize: { models: { Player } } } = t.context;
  const { player1, player2 } = instances;
  // this doesn't exist in our fixtures
  const url = '/players/returnsNone';
  const method = 'DELETE';

  const presentPlayers = yield Player.findAll();
  const playerIds = presentPlayers.map(_ref21);
  t.truthy(playerIds.includes(player1.id));
  t.truthy(playerIds.includes(player2.id));

  const { statusCode } = yield server.inject({ url, method });
  t.is(statusCode, STATUS_NOT_FOUND);

  const nonDeletedPlayers = yield Player.findAll();
  const nonDeletedPlayerIds = nonDeletedPlayers.map(_ref22);
  t.truthy(nonDeletedPlayerIds.includes(player1.id));
  t.truthy(nonDeletedPlayerIds.includes(player2.id));
}

(0, _ava2.default)('destroyScope /players/returnsNone', (() => {
  var _ref20 = _asyncToGenerator(_ref23);

  return function (_x8) {
    return _ref20.apply(this, arguments);
  };
})());

function _ref25({ id }) {
  return id;
}

function _ref26({ id }) {
  return id;
}

function* _ref27(t) {
  const { server, instances, sequelize: { models: { Player } } } = t.context;
  const { player1, player2 } = instances;
  // this doesn't exist in our fixtures
  const url = '/players/invalid';
  const method = 'DELETE';

  const presentPlayers = yield Player.findAll();
  const playerIds = presentPlayers.map(_ref25);
  t.truthy(playerIds.includes(player1.id));
  t.truthy(playerIds.includes(player2.id));

  const { statusCode } = yield server.inject({ url, method });
  t.is(statusCode, STATUS_BAD_REQUEST);

  const nonDeletedPlayers = yield Player.findAll();
  const nonDeletedPlayerIds = nonDeletedPlayers.map(_ref26);
  t.truthy(nonDeletedPlayerIds.includes(player1.id));
  t.truthy(nonDeletedPlayerIds.includes(player2.id));
}

(0, _ava2.default)('destroyScope invalid scope /players/invalid', (() => {
  var _ref24 = _asyncToGenerator(_ref27);

  return function (_x9) {
    return _ref24.apply(this, arguments);
  };
})());
//# sourceMappingURL=data:application/json;base64,