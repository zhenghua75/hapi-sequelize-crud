'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.restrictMethods = exports.idParamsMethods = exports.scopeParamsMethods = exports.payloadMethods = exports.includeMethods = exports.whereMethods = exports.sequelizeOperators = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _lodash = require('lodash');

var _joi = require('joi');

var _joi2 = _interopRequireDefault(_joi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// if the custom validation is a joi object we need to concat
// else, assume it's an plain object and we can just add it in with .keys
const concatToJoiObject = (joi, candidate) => {
  if (!candidate) return joi;else if (candidate.isJoi) return joi.concat(candidate);else return joi.keys(candidate);
};

const sequelizeOperators = exports.sequelizeOperators = {
  $and: _joi2.default.any(),
  $or: _joi2.default.any(),
  $gt: _joi2.default.any(),
  $gte: _joi2.default.any(),
  $lt: _joi2.default.any(),
  $lte: _joi2.default.any(),
  $ne: _joi2.default.any(),
  $eq: _joi2.default.any(),
  $not: _joi2.default.any(),
  $between: _joi2.default.any(),
  $notBetween: _joi2.default.any(),
  $in: _joi2.default.any(),
  $notIn: _joi2.default.any(),
  $like: _joi2.default.any(),
  $notLike: _joi2.default.any(),
  $iLike: _joi2.default.any(),
  $notILike: _joi2.default.any(),
  $overlap: _joi2.default.any(),
  $contains: _joi2.default.any(),
  $contained: _joi2.default.any(),
  $any: _joi2.default.any(),
  $col: _joi2.default.any()
};

const whereMethods = exports.whereMethods = ['list', 'get', 'scope', 'destroy', 'destoryScope', 'destroyAll'];

const includeMethods = exports.includeMethods = ['list', 'get', 'scope', 'destoryScope'];

const payloadMethods = exports.payloadMethods = ['create', 'update'];

const scopeParamsMethods = exports.scopeParamsMethods = ['destroyScope', 'scope'];

const idParamsMethods = exports.idParamsMethods = ['get', 'update'];

const restrictMethods = exports.restrictMethods = ['list', 'scope'];

exports.default = ({
  method, attributeValidation, associationValidation, scopes = [], config = {}
}) => {
  const hasWhere = whereMethods.includes(method);
  const hasInclude = includeMethods.includes(method);
  const hasPayload = payloadMethods.includes(method);
  const hasScopeParams = scopeParamsMethods.includes(method);
  const hasIdParams = idParamsMethods.includes(method);
  const hasRestrictMethods = restrictMethods.includes(method);
  // clone the config so we don't modify it on multiple passes.
  let methodConfig = _extends({}, config, { validate: _extends({}, config.validate) });

  if (hasWhere) {
    const query = concatToJoiObject(_joi2.default.object().keys(_extends({}, attributeValidation, sequelizeOperators)), (0, _lodash.get)(methodConfig, 'validate.query'));

    methodConfig = (0, _lodash.set)(methodConfig, 'validate.query', query);
  }

  if (hasInclude) {
    const query = concatToJoiObject(_joi2.default.object().keys(_extends({}, associationValidation)), (0, _lodash.get)(methodConfig, 'validate.query'));

    methodConfig = (0, _lodash.set)(methodConfig, 'validate.query', query);
  }

  if (hasPayload) {
    const payload = concatToJoiObject(_joi2.default.object().keys(_extends({}, attributeValidation)), (0, _lodash.get)(methodConfig, 'validate.payload'));

    methodConfig = (0, _lodash.set)(methodConfig, 'validate.payload', payload);
  }

  if (hasScopeParams) {
    const params = concatToJoiObject(_joi2.default.object().keys({
      scope: _joi2.default.string().valid(...scopes)
    }), (0, _lodash.get)(methodConfig, 'validate.params'));

    methodConfig = (0, _lodash.set)(methodConfig, 'validate.params', params);
  }

  if (hasIdParams) {
    const params = concatToJoiObject(_joi2.default.object().keys({
      id: _joi2.default.any()
    }), (0, _lodash.get)(methodConfig, 'validate.params'));

    methodConfig = (0, _lodash.set)(methodConfig, 'validate.params', params);
  }

  if (hasRestrictMethods) {
    const query = concatToJoiObject(_joi2.default.object().keys({
      limit: _joi2.default.number().min(0).integer(),
      offset: _joi2.default.number().min(0).integer(),
      order: [_joi2.default.array(), _joi2.default.string()]
    }), (0, _lodash.get)(methodConfig, 'validate.query'));

    methodConfig = (0, _lodash.set)(methodConfig, 'validate.query', query);
  }

  return methodConfig;
};
//# sourceMappingURL=data:application/json;base64,