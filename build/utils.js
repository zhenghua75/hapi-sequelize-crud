'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMethod = exports.parseOrder = exports.parseLimitAndOffset = exports.parseWhere = exports.parseInclude = undefined;

var _lodash = require('lodash');

var _boom = require('boom');

const sequelizeKeys = ['include', 'order', 'limit', 'offset'];

const getModels = request => {
  const noGetDb = typeof request.getDb !== 'function';
  const noRequestModels = !request.models;
  if (noGetDb && noRequestModels) {
    return (0, _boom.notImplemented)('`request.getDb` or `request.models` are not defined.' + 'Be sure to load hapi-sequelize before hapi-sequelize-crud.');
  }

  const { models } = noGetDb ? request : request.getDb();

  return models;
};

const parseInclude = exports.parseInclude = request => {
  const include = Array.isArray(request.query.include) ? request.query.include : [request.query.include];

  const models = getModels(request);
  if (models.isBoom) return models;

  return include.map(a => {
    const singluarOrPluralMatch = Object.keys(models).find(modelName => {
      const { _singular, _plural } = models[modelName];
      return _singular === a || _plural === a;
    });

    if (singluarOrPluralMatch) return models[singluarOrPluralMatch];

    if (typeof a === 'string') return models[a];

    if (a && typeof a.model === 'string' && a.model.length) {
      a.model = models[a.model];
    }

    return a;
  }).filter(_lodash.identity);
};

const parseWhere = exports.parseWhere = request => {
  const where = (0, _lodash.omit)(request.query, sequelizeKeys);

  for (const key of Object.keys(where)) {
    try {
      where[key] = JSON.parse(where[key]);
    } catch (e) {
      //
    }
  }

  return where;
};

const parseLimitAndOffset = exports.parseLimitAndOffset = request => {
  const { limit, offset } = request.query;
  const out = {};
  if (!(0, _lodash.isUndefined)(limit)) {
    out.limit = (0, _lodash.toNumber)(limit);
  }
  if (!(0, _lodash.isUndefined)(offset)) {
    out.offset = (0, _lodash.toNumber)(offset);
  }
  return out;
};

const parseOrderArray = (order, models) => {
  return order.map(requestColumn => {
    if (Array.isArray(requestColumn)) {
      return parseOrderArray(requestColumn, models);
    }

    let column;
    try {
      column = JSON.parse(requestColumn);
    } catch (e) {
      column = requestColumn;
    }

    if (column.model) column.model = models[column.model];

    return column;
  });
};

const parseOrder = exports.parseOrder = request => {
  const { order } = request.query;

  if (!order) return null;

  const models = getModels(request);
  if (models.isBoom) return models;

  // transform to an array so sequelize will escape the input for us and
  // maintain security. See http://docs.sequelizejs.com/en/latest/docs/querying/#ordering
  const requestOrderColumns = (0, _lodash.isString)(order) ? [order.split(' ')] : order;

  const parsedOrder = parseOrderArray(requestOrderColumns, models);

  return parsedOrder;
};

const getMethod = exports.getMethod = (model, association, plural = true, method = 'get') => {
  const a = plural ? association.original.plural : association.original.singular;
  const b = plural ? association.original.singular : association.original.plural; // alternative
  const fn = model[`${ method }${ a }`] || model[`${ method }${ b }`];
  if (fn) return fn.bind(model);

  return false;
};
//# sourceMappingURL=data:application/json;base64,