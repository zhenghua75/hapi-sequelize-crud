'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _utils = require('./utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_ava2.default.beforeEach(t => {
  const models = t.context.models = { User: {} };
  t.context.request = { query: {}, models };
});

(0, _ava2.default)('parseLimitAndOffset is a function', t => {
  t.is(typeof _utils.parseLimitAndOffset, 'function');
});

(0, _ava2.default)('parseLimitAndOffset returns limit and offset', t => {
  const { request } = t.context;
  request.query.limit = 1;
  request.query.offset = 2;
  request.query.thing = 'hi';

  t.is((0, _utils.parseLimitAndOffset)(request).limit, request.query.limit);

  t.is((0, _utils.parseLimitAndOffset)(request).offset, request.query.offset);
});

(0, _ava2.default)('parseLimitAndOffset returns limit and offset as numbers', t => {
  const { request } = t.context;
  const limit = 1;
  const offset = 2;
  request.query.limit = `${ limit }`;
  request.query.offset = `${ offset }`;
  request.query.thing = 'hi';

  t.is((0, _utils.parseLimitAndOffset)(request).limit, limit);

  t.is((0, _utils.parseLimitAndOffset)(request).offset, offset);
});

(0, _ava2.default)('parseOrder is a function', t => {
  t.is(typeof _utils.parseOrder, 'function');
});

(0, _ava2.default)('parseOrder returns order when a string', t => {
  const { request } = t.context;
  const order = 'thing';
  request.query.order = order;
  request.query.thing = 'hi';

  t.deepEqual((0, _utils.parseOrder)(request), [[order]]);
});

(0, _ava2.default)('parseOrder returns order when json', t => {
  const { request, models } = t.context;
  request.query.order = [JSON.stringify({ model: 'User' }), 'DESC'];
  request.query.thing = 'hi';

  t.deepEqual((0, _utils.parseOrder)(request), [{ model: models.User }, 'DESC']);
});

(0, _ava2.default)('parseOrder returns null when not defined', t => {
  const { request } = t.context;
  request.query.thing = 'hi';

  t.is((0, _utils.parseOrder)(request), null);
});

(0, _ava2.default)('parseWhere is a function', t => {
  t.is(typeof _utils.parseWhere, 'function');
});

(0, _ava2.default)('parseWhere returns the non-sequelize keys', t => {
  const { request } = t.context;
  request.query.order = 'thing';
  request.query.include = 'User';
  request.query.limit = 2;
  request.query.thing = 'hi';

  t.deepEqual((0, _utils.parseWhere)(request), { thing: 'hi' });
});

(0, _ava2.default)('parseWhere returns json converted keys', t => {
  const { request } = t.context;
  request.query.order = 'hi';
  request.query.thing = '{"id": {"$in": [2, 3]}}';

  t.deepEqual((0, _utils.parseWhere)(request), { thing: { id: { $in: [2, 3] } } });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy50ZXN0LmpzIl0sIm5hbWVzIjpbImJlZm9yZUVhY2giLCJ0IiwibW9kZWxzIiwiY29udGV4dCIsIlVzZXIiLCJyZXF1ZXN0IiwicXVlcnkiLCJpcyIsImxpbWl0Iiwib2Zmc2V0IiwidGhpbmciLCJvcmRlciIsImRlZXBFcXVhbCIsIkpTT04iLCJzdHJpbmdpZnkiLCJtb2RlbCIsImluY2x1ZGUiLCJpZCIsIiRpbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBOzs7O0FBRUEsY0FBS0EsVUFBTCxDQUFpQkMsQ0FBRCxJQUFPO0FBQ3JCLFFBQU1DLFNBQVNELEVBQUVFLE9BQUYsQ0FBVUQsTUFBVixHQUFtQixFQUFFRSxNQUFNLEVBQVIsRUFBbEM7QUFDQUgsSUFBRUUsT0FBRixDQUFVRSxPQUFWLEdBQW9CLEVBQUVDLE9BQU8sRUFBVCxFQUFhSixNQUFiLEVBQXBCO0FBQ0QsQ0FIRDs7QUFLQSxtQkFBSyxtQ0FBTCxFQUEyQ0QsQ0FBRCxJQUFPO0FBQy9DQSxJQUFFTSxFQUFGLENBQUssaUNBQUwsRUFBaUMsVUFBakM7QUFDRCxDQUZEOztBQUlBLG1CQUFLLDhDQUFMLEVBQXNETixDQUFELElBQU87QUFDMUQsUUFBTSxFQUFFSSxPQUFGLEtBQWNKLEVBQUVFLE9BQXRCO0FBQ0FFLFVBQVFDLEtBQVIsQ0FBY0UsS0FBZCxHQUFzQixDQUF0QjtBQUNBSCxVQUFRQyxLQUFSLENBQWNHLE1BQWQsR0FBdUIsQ0FBdkI7QUFDQUosVUFBUUMsS0FBUixDQUFjSSxLQUFkLEdBQXNCLElBQXRCOztBQUVBVCxJQUFFTSxFQUFGLENBQ0UsZ0NBQW9CRixPQUFwQixFQUE2QkcsS0FEL0IsRUFFSUgsUUFBUUMsS0FBUixDQUFjRSxLQUZsQjs7QUFLQVAsSUFBRU0sRUFBRixDQUNFLGdDQUFvQkYsT0FBcEIsRUFBNkJJLE1BRC9CLEVBRUlKLFFBQVFDLEtBQVIsQ0FBY0csTUFGbEI7QUFJRCxDQWZEOztBQWlCQSxtQkFBSyx5REFBTCxFQUFpRVIs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V1AsT0FBWCxDQURGLEVBRUksRUFBRUssT0FBTyxFQUFFTyxJQUFJLEVBQUVDLEtBQUssQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFQLEVBQU4sRUFBVCxFQUZKO0FBSUQsQ0FURCIsImZpbGUiOiJ1dGlscy50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRlc3QgZnJvbSAnYXZhJztcbmltcG9ydCB7IHBhcnNlTGltaXRBbmRPZmZzZXQsIHBhcnNlT3JkZXIsIHBhcnNlV2hlcmUgfSBmcm9tICcuL3V0aWxzLmpzJztcblxudGVzdC5iZWZvcmVFYWNoKCh0KSA9PiB7XG4gIGNvbnN0IG1vZGVscyA9IHQuY29udGV4dC5tb2RlbHMgPSB7IFVzZXI6IHt9IH07XG4gIHQuY29udGV4dC5yZXF1ZXN0ID0geyBxdWVyeToge30sIG1vZGVscyB9O1xufSk7XG5cbnRlc3QoJ3BhcnNlTGltaXRBbmRPZmZzZXQgaXMgYSBmdW5jdGlvbicsICh0KSA9PiB7XG4gIHQuaXModHlwZW9mIHBhcnNlTGltaXRBbmRPZmZzZXQsICdmdW5jdGlvbicpO1xufSk7XG5cbnRlc3QoJ3BhcnNlTGltaXRBbmRPZmZzZXQgcmV0dXJucyBsaW1pdCBhbmQgb2Zmc2V0JywgKHQpID0+IHtcbiAgY29uc3QgeyByZXF1ZXN0IH0gPSB0LmNvbnRleHQ7XG4gIHJlcXVlc3QucXVlcnkubGltaXQgPSAxO1xuICByZXF1ZXN0LnF1ZXJ5Lm9mZnNldCA9IDI7XG4gIHJlcXVlc3QucXVlcnkudGhpbmcgPSAnaGknO1xuXG4gIHQuaXMoXG4gICAgcGFyc2VMaW1pdEFuZE9mZnNldChyZXF1ZXN0KS5saW1pdFxuICAgICwgcmVxdWVzdC5xdWVyeS5saW1pdFxuICApO1xuXG4gIHQuaXMoXG4gICAgcGFyc2VMaW1pdEFuZE9mZnNldChyZXF1ZXN0KS5vZmZzZXRcbiAgICAsIHJlcXVlc3QucXVlcnkub2Zmc2V0XG4gICk7XG59KTtcblxudGVzdCgncGFyc2VMaW1pdEFuZE9mZnNldCByZXR1cm5zIGxpbWl0IGFuZCBvZmZzZXQgYXMgbnVtYmVycycsICh0KSA9PiB7XG4gIGNvbnN0IHsgcmVxdWVzdCB9ID0gdC5jb250ZXh0O1xuICBjb25zdCBsaW1pdCA9IDE7XG4gIGNvbnN0IG9mZnNldCA9IDI7XG4gIHJlcXVlc3QucXVlcnkubGltaXQgPSBgJHtsaW1pdH1gO1xuICByZXF1ZXN0LnF1ZXJ5Lm9mZnNldCA9IGAke29mZnNldH1gO1xuICByZXF1ZXN0LnF1ZXJ5LnRoaW5nID0gJ2hpJztcblxuICB0LmlzKFxuICAgIHBhcnNlTGltaXRBbmRPZmZzZXQocmVxdWVzdCkubGltaXRcbiAgICAsIGxpbWl0XG4gICk7XG5cbiAgdC5pcyhcbiAgICBwYXJzZUxpbWl0QW5kT2Zmc2V0KHJlcXVlc3QpLm9mZnNldFxuICAgICwgb2Zmc2V0XG4gICk7XG59KTtcblxudGVzdCgncGFyc2VPcmRlciBpcyBhIGZ1bmN0aW9uJywgKHQpID0+IHtcbiAgdC5pcyh0eXBlb2YgcGFyc2VPcmRlciwgJ2Z1bmN0aW9uJyk7XG59KTtcblxudGVzdCgncGFyc2VPcmRlciByZXR1cm5zIG9yZGVyIHdoZW4gYSBzdHJpbmcnLCAodCkgPT4ge1xuICBjb25zdCB7IHJlcXVlc3QgfSA9IHQuY29udGV4dDtcbiAgY29uc3Qgb3JkZXIgPSAndGhpbmcnO1xuICByZXF1ZXN0LnF1ZXJ5Lm9yZGVyID0gb3JkZXI7XG4gIHJlcXVlc3QucXVlcnkudGhpbmcgPSAnaGknO1xuXG4gIHQuZGVlcEVxdWFsKFxuICAgIHBhcnNlT3JkZXIocmVxdWVzdClcbiAgICAsIFtbb3JkZXJdXVxuICApO1xufSk7XG5cbnRlc3QoJ3BhcnNlT3JkZXIgcmV0dXJucyBvcmRlciB3aGVuIGpzb24nLCAodCkgPT4ge1xuICBjb25zdCB7IHJlcXVlc3QsbW9kZWxzIH0gPSB0LmNvbnRleHQ7XG4gIHJlcXVlc3QucXVlcnkub3JkZXIgPSBbSlNPTi5zdHJpbmdpZnkoeyBtb2RlbDogJ1VzZXInIH0pLCAnREVTQyddO1xuICByZXF1ZXN0LnF1ZXJ5LnRoaW5nID0gJ2hpJztcblxuICB0LmRlZXBFcXVhbChcbiAgICBwYXJzZU9yZGVyKHJlcXVlc3QpXG4gICAgLCBbeyBtb2RlbDogbW9kZWxzLlVzZXIgfSwgJ0RFU0MnXVxuICApO1xufSk7XG5cbnRlc3QoJ3BhcnNlT3JkZXIgcmV0dXJucyBudWxsIHdoZW4gbm90IGRlZmluZWQnLCAodCkgPT4ge1xuICBjb25zdCB7IHJlcXVlc3QgfSA9IHQuY29udGV4dDtcbiAgcmVxdWVzdC5xdWVyeS50aGluZyA9ICdoaSc7XG5cbiAgdC5pcyhcbiAgICBwYXJzZU9yZGVyKHJlcXVlc3QpXG4gICAgLCBudWxsXG4gICk7XG59KTtcblxuXG50ZXN0KCdwYXJzZVdoZXJlIGlzIGEgZnVuY3Rpb24nLCAodCkgPT4ge1xuICB0LmlzKHR5cGVvZiBwYXJzZVdoZXJlLCAnZnVuY3Rpb24nKTtcbn0pO1xuXG50ZXN0KCdwYXJzZVdoZXJlIHJldHVybnMgdGhlIG5vbi1zZXF1ZWxpemUga2V5cycsICh0KSA9PiB7XG4gIGNvbnN0IHsgcmVxdWVzdCB9ID0gdC5jb250ZXh0O1xuICByZXF1ZXN0LnF1ZXJ5Lm9yZGVyID0gJ3RoaW5nJztcbiAgcmVxdWVzdC5xdWVyeS5pbmNsdWRlID0gJ1VzZXInO1xuICByZXF1ZXN0LnF1ZXJ5LmxpbWl0ID0gMjtcbiAgcmVxdWVzdC5xdWVyeS50aGluZyA9ICdoaSc7XG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgcGFyc2VXaGVyZShyZXF1ZXN0KVxuICAgICwgeyB0aGluZzogJ2hpJyB9XG4gICk7XG59KTtcblxudGVzdCgncGFyc2VXaGVyZSByZXR1cm5zIGpzb24gY29udmVydGVkIGtleXMnLCAodCkgPT4ge1xuICBjb25zdCB7IHJlcXVlc3QgfSA9IHQuY29udGV4dDtcbiAgcmVxdWVzdC5xdWVyeS5vcmRlciA9ICdoaSc7XG4gIHJlcXVlc3QucXVlcnkudGhpbmcgPSAne1wiaWRcIjoge1wiJGluXCI6IFsyLCAzXX19JztcblxuICB0LmRlZXBFcXVhbChcbiAgICBwYXJzZVdoZXJlKHJlcXVlc3QpXG4gICAgLCB7IHRoaW5nOiB7IGlkOiB7ICRpbjogWzIsIDNdIH0gfSB9XG4gICk7XG59KTtcbiJdfQ==